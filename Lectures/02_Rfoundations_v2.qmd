---
title: "Introduction to R for Data Science"
author: "DATA*6200"
format: 
  revealjs:
    echo: true
    code-line-numbers: false
    slide-number: true
---

## Learning objectives and reading

::: columns
::: {.column width="50%"}
-   An introduction to the R interface.

    -   Rscripts
    -   quarto files
    -   console
    -   terminal

-   Basic data structures, assignment, and operations

-   Your ?first? Dplyr verbs
:::

::: {.column width="50%"}
Some reading:

-   R for Data Science Chapters 2 and 3
-   Advanced R chapter 2 and 3

**Version 2**

- `l[[x]]` changed to `l[[1]]` on slide 9
- `13` add to install.packages line on slide 20


:::
:::

## What is R?

::: incremental
-   R is a programming language. You can run rscripts in the command line or terminal if you would like
-   Rstudio is nice interface for creating R **projects**, which ties together data, code files, etc.
-   Rmarkdown and Quarto are like notebooks. They are files that allow you to weave code together narrative, visualizations, and code.
    -   these tools also allow you to weave together **multiple languages** like Julia, Python, C++, JS
-   These slides were created using Quarto!
:::

## Help

::: incremental
-   Justin will give you a quick tour of
    -   R scripts vs. console
    -   Rmarkdown and Quarto scripts (show visual)
    -   How to view data using point-and-click
    -   terminal and background jobs
:::

## "Types" of R programming

::: incremental
-   R, unlike other languages used in data science, was build for data analytics and statistics. It's predecessors were S and S+.
-   To be overly simplistic, there are two "flavours" of R programming
    1)  **Base R** - this is a very brutalist way of coding, does not look or feel tidy but it gets the job done and is very robust
    2)  **Tidyverse** - a group of R packages that seamlessly integrate together to make data science more straight forward
-   Learning a combination of both is ideal
:::

## Some packages

-   Before we begin looking at R code, we will first quickly look at packages. This first package will be used for **instructional purposes only**.

. . .

```{r}
library(lobstr) #purely for instructive purposes
```

. . . - These second two packages will form the core our "R foundations" `dplyr` is the core `tidyverse` package, and `ggplot2` is our core data visualization package.

. . .

```{r}
library(dplyr) # core tidyverse package
library(ggplot2) #core visualization package
```

. . .

-   The first time you use these packages, you will have to first install them using:

```{r, eval= FALSE}
install.packages("dplyr")
```

## Basic R operations

-   In R, you can add, subtract and multiply numbers in the way you would expect

. . .

```{r}
7+6
```

. . .

```{r}
7*8
```

. . .

-   I can also assign variables these values and store them in RAM. There are two ways to do this:

```{r}
x = 50
x <- 50 # on windows "ALT" + "-". Mac = "CMD" + "-"
```

. . .

-   I can then type x into the console and it will print the associated value.

```{r}
x
```

## Atomic Vectors

-   One of the more common types of objects in R is the "vector":

```{r}
x <- c(1,3,5)
```

. . .

-   where 1,3,5 in this case are **elements**

. . .

-   If you want to access the, say, 2nd element of this vector. You can use:

. . .

```{r}
x[2]
```

. . .

-   Vectors can have meta-data called **attributes**. More on this in a few slides.

## Lists

-   Another common object is a **list**:

. . .

```{r}
l <-  list(x=c(1,2), y = c(3,4), z = c(5,6))
l
```

. . .

-   You can access `x` via `l$x` or `l[[1]]`.

. . .

-   Name two ways to access the 2nd element of x.

## A note on memory usage

-   When doing data manipulation it is very important to be aware of how much memory (RAM) you are using.

. . .

-   Pretend that `x` here is taking up 3 units of memory (1 for each element).

. . .

```{r}
x <-  c(1,3,5)
```

. . .

-   Suppose I ran

```{r}
y <-  c(1,3,5)
```

-   What is the total memory usage of x and y? What if I instead did

```{r}
y <- x
```

## Copy-on-modify

Why is this the case? R uses a system called *copy-on-modify*. The name `x` points to the an address in memory:

```{r}
obj_addr(x)

```

. . .

And when we say `y <- x`, R will simply create a second pointer to that same location in memory:

```{r}
obj_addr(y)
```

. . .

But if you *modify* y, then it will make a new address and use extra memory:

```{r}
y = y+5
obj_addr(y)
```

## Attributes of vectors

Attributes of vectors are metadata describing the vector:

```{r}
a <- 1:3
attr(a, "x") <- "abcdef"
attr(a, "y") <- 4:6
str(attributes(a)) # str stands for structure
```

. . .

**Matrices and arrays are simply vectors with a `dim` attribute.**

```{r}
z <- 1:6
dim(z) <- c(3, 2)
z
```

## Matrices and Arrays

You can also define a matrix/array using `matrix()` and `array()` . . .

```{r}
z = matrix(1:6, nrow = 3, ncol = 2)
z = array(1:6, dim = c(3,2,1))
```

. . .

-   Lists are more flexible than vectors because vectors have to be the same thing, while lists can have different things:

::: columns
::: {.column width="50%"}
```{r}
c("x",1,2)
```
:::

::: {.column width="50%"}
```{r}
list("x",1,2)
```
:::
:::

## Functions

::: incremental
-   When we do things like attributes() and str() what we are doing is applying a **function** to an object.

-   Functions take in arguments and output something of interest.

-   There are various built-in R functions, and there are other functions that we get from libraries.

-   We can also write our own functions:
:::

. . .

::: columns
::: {.column width="60%"}
``` {.r code-line-numbers="|1|2|3|4"}
operate = function(a,b, operation){
  if(operation == "addition") {return(a+b)}
  else if(operation == "subtraction") {return(a-b)}
  else{print("?????????????")}
}
```
:::

::: {.column width="40%"}
```{r, echo = FALSE}
operate = function(a,b, operation){
  if(operation == "addition") {return(a+b)}
  else if(operation == "subtraction") {return(a-b)}
  else{print("?????????????")}
}
```

```{r}
operate(6,9, "subtraction")
```
:::
:::

## S3 classes

::: incremental
-   Having a "class" attribute turns an object into an **S3** object. S3 classes are a R's simple way of implementing **object oriented programming**.

-   TLDR of object oriented programming: make the objects we deal with the focus of our coding, as opposed to functions.

-   Objects with different S3 classes will behave differently when passed through generic functions.

. . .
:::

## S3 classes example

For instance, consider fitting a simple linear regression model in R and using the `summary` function on it. If we do the same thing on a numeric vector, the function does something completely different.

::: columns
::: {.column width="60%"}
``` {.r code-line-numbers="|1|2|3|4"}
x <- rnorm(50); y=rnorm(50)
model = lm(y~x)
class(model)
summary(model)
```

. . .

```{r echo= FALSE}
x <- rnorm(50); y=rnorm(50)
model = lm(y~x)
class(model)
summary(model)
```
:::

::: {.column width="40%"}
```{r}
z = c(1,2,3)
class(z)
summary(z)
```
:::
:::

## Data frames

::: incremental
**Data frames** are **the** fundamental data structure for doing data science in R. There are cheap knockoffs in Python.

-   A data frame is a named list of vectors with the following attributes:
    -   "names" = *column names*
    -   "row.names" = *names of rows*
    -   "class" = data.frame

Data frames have the additional constraint that all vectors must be the same length. Usual lists don't have this constraint.
:::

## Data frame example

```{r}
x = data.frame(height = c(185,155,175), weight = c(61,75,88))
row.names(x) = c("Mary","Larry","Moe")
attributes(x)
```

. . .

```{r}
x
```

## Basic operations on data.frames()

For a quick summary of the number of rows/columns, use `nrow()`/`ncol`.

. . .

To select a column, you can use the \$ operator. Mean of height column:

```{r}
mean(x$height)
```

. . .

Can can also subset the rows/columns of x based on names using x\[*row index*, *column index*\]

. . .

```{r}
x[c(1,2),1]
x[c("Mary","Larry"), "height"]
```

## Dplyr

TLDR is that Dplyr makes data wrangling easier. There are \~6 dplyr functions that work on data.frames are all you need for **basic** data wrangling.

. . .

As an example, let's use this new york flights data frame. Copy the code snippet below and run it in your R environment.

. . .

```{r}
#install.packages("nycflights13")
library(nycflights13)
head(flights,4)
```

## data.frame example

::: incremental
-   How many rows do these data have?

-   What are the attributes of this object?

-   View the data in Rstudio.
:::

## Dplyr operations

::: incremental
Dplyr functions all have three things in common.

1.  The first argument of the function is always a data.frame
2.  The subsequent arguments describe which columns to operate on
3.  The output is a data.frame
:::

. . .

Example:

```{r}
flights_to_IAH <- filter(flights, dest=="IAH")
head(flights_to_IAH,5)
```

## Dplyr verbs

-   There are many Dplyr verbs or combinations of verbs that do 1 thing well. So we can combine them to wrangle our data into the form that we want.

. . .

-   Suppose now I am really only interested in arrival delay and carrier. We can *select* these columns using:

. . .

```{r}
flights_carrier = select(flights_to_IAH, carrier, arr_delay)
```

. . .

::: columns
::: {.column width="40%"}
```{r}
head(flights_carrier,5)
```
:::

::: {.column width="60%"}
What's the major problem with what we just did.
:::
:::

## Pipe Operator

Writing functions of functions get get messy really quick. The pipe operate, `|>`, allows us to **chain commands** together, by assuming that the object on the left of the pipe is the first argument in the function on the right of the pipe.

. . .

```{r}
z <- c(1,3,5) |> sum()
z
```

. . .

Here is how we can rewrite the previous two data manipulation steps without an intermediate object or messy code:

```{r}
flights_tidy <- flights |> 
  filter(dest == "IAH") |> 
  select(carrier, dep_delay)
```

## Some other benefits

If you use the hotkey of CTRL/CMD + SHIFT + M, your hands never have to leave the keyboard and you can chain commands lightning fast.

. . .

You can visually see each step that is being performed, and can even comment out intermediate steps:

. . .

``` r
flights_tidy <- flights |> 
  #filter(dest == "IAH") |> # you could also add a comment here like: Removed 12 rows
  select(carrier, dep_delay)
```

## Some more verbs

The final verbs for the day are somewhat of a combo. Suppose we wanted to know the average departure delay of each airline when flying to George Bush International.

. . .

I can use the `group_by` and `summarise` combo to perform an operation, in this case average, over a variable. Here is an example from the beginning for completeness:

. . .

```{r}
flights |> 
  filter(dest == "IAH") |> 
  group_by(carrier) |> 
  summarise(mean_dep_delay = mean(dep_delay, na.rm=TRUE))
```

## Summary

With just the 4 verbs you have learned today, you can do a lot of meaningful data wrangling.

Here is an exercise if we have time:

\*\* What origin airport has the hight average departure delay?\*\* Hint: New verb `arrange()`.
