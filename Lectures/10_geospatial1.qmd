---
title: "Intro to Geospatial data: Simple features"
author: "DATA*6200"
date: "Oct 9, 2024"
format: 
  revealjs:
    echo: true
    code-line-numbers: false
    slide-number: true
    width: 1500
    height: 700
---

## Learning objectives and reading

::: columns
::: {.column width="50%"}
Learning objectives

- What is Geospatial data?
- Coordinate reference systems
- Simple feature geometries and objects


:::

::: {.column width="50%"}

**Reading**

Geocomputation with R.

Over the next few lectures, we will cover aspects of Chapters 1-5, 8, 9 
:::
:::

# Geospatial - Intro to simple features

```{r, results = "hide"}
library(tidyverse)
library(sf) # sf = simple features
library(osmdata) # open source vector data
library(spData) # has data that we will work with
```

## Motivating example: Google Maps

::: columns
::: {.column width="30%"}
-   Google, Uber, Amazon, all have databases representing roads, parks, buildings, etc.

-   What information is being conveyed here?

-   How do we store this in a data frame?
:::

::: {.column width="70%"}
![](10_google_maps1.PNG){height="75%"}
:::
:::

## 

::: columns
::: {.column width="30%"}
Zoom in and we get a different view.

How about now?
:::

::: {.column width="70%"}
![](10_google_maps2.PNG){width="90%"}
:::
:::

## Geospatial data is different

::: incremental
-   We need a way to represent the location of something, along with potentially it's shape, as well as other attributes like it's name, or other information.

-   With this information, we can now compute things like:

    -   Distances
    -   Areas (of say, a park)
    -   Shortest paths between locations via roads (or other)

-   Any company with it's own navigation/mapping software deals with spatial data: Google, Apple, Uber, Lyft, Airbnb

-   Enormous datasets that won't fit on a hard drive.
:::

## Vector data

::: columns
::: {.column width="60%"}
::: incremental
-   Vector data is represented by **geometries**.
    -   points (top)
    -   linestrings (mid)
    -   polygons (bot)
-   This is how human-made phenomena are typically represented:
    -   streets, buildings, area codes, state borders
-   These geometries allow us to be precise, but take a lot of memory
:::
:::

::: {.column width="40%"}
![](10_sf1.PNG){height="90%"}
:::
:::

## 

::: columns
::: {.column width="60%"}
-   Can also have **multi** versions of each.
    -   Multipoint (top)
    -   Multilinestring (mid)
    -   Multipolygon (bot)

A **Geometry Collection** is a combination of some or all of these.
:::

::: {.column width="40%"}
![](10_sf2.PNG){width="80%"}
:::
:::

## 

::: columns
::: {.column width="30%"}
Which feature geometry is each of the following:

-   Day Hall
-   Bob's Dogs
-   Bullring
-   Trent lane
:::

::: {.column width="70%"}
![https://www.openstreetmap.org/#map=19/43.531720/-80.226740](10_osm.PNG){width="80%"}
:::
:::

## Simple features in R

```{r, echo = FALSE, cache = TRUE}
# pull appropriate data from openstreetmap
xmin = -80.22683
ymin = 43.53128
xmax = -80.22483
ymax = 43.53328

bbox = c(left = xmin, bottom = ymin, right = xmax, top = ymax)

osm_query <- opq(bbox) |>
  osmdata_sf()

bob = osm_query$osm_points |> filter(name =="Bob's Dogs") |> 
  select(name, amenity)

buildings = osm_query$osm_polygons |> filter(name %in% c("The Bullring", "Day Hall")) |> 
  select(name, amenity)

paths = osm_query$osm_lines[1,]|> select(name, amenity)

guelph = rbind.data.frame(bob,buildings,paths)

row.names(guelph) = 1:nrow(guelph)
```

I queried all spatial data within that "box" I showed on the previous slide, kept only the **features** we are interested in.

These were stored in an `sf` object called `guelph`:

```{r}
guelph
```

## Simple feature column (sfc)

```{r}
guelph
```

-   An `sf` objected is a data frame where one of the columns is an `sfc` that represents the geometry/location.

-   That `sfc` has a corresponding `coordinate reference system (CRS)`. In the above example, it is `WGS 84`, the most common CRS.

-   This column behaves differently than other columns in the data frame.

-   Aside from the `sfc`, `sf` objects behave just like usual data frames. I.e we can `select()`, `filter()`, etc.

## Coordinate reference systems

::: incremental
-   Perhaps the most misunderstood aspect of working with spatial locations are the CRS.

-   You may have seen spatial locations be represented as latitude and longitude... but it's more complicated than that.

-   In order to talk about a location on the Earth, we first need a **model for the Earth**, also known as a **datum**.

-   With this Datum, we can then define a coordinate system, like latitude/longitude, or something else.
:::

## 

::: columns
::: {.column width="50%"}
::: incremental
-   The Earth is not perfectly round. However, we can **approximate it with a sphere or ellipsoid**.

-   Some spheres/ellipsoids approximate Earth better than others.

-   Geocentric Datum's (like WGS 84) are pretty good everywhere.

-   Local Datum's are accurate for particular locations. E.g NAD83 is great for the U.S.

-   A coordinate system can then map pairs of numbers to spots on the sphere/ellipsoid.
:::
:::

::: {.column width="50%"}
![Figure 2.16 of Geocomputation with R](10_crs.PNG){width="80%"}
:::
:::

## 

If you use a bad coordinate reference system, your plots and analysis will be **nonsense**

::: columns
::: {.column width="50%"}
![Germany with good CRS](10_CRS2.PNG){width="55%"}
:::

::: {.column width="50%"}
![Germany with bad CRS](10_CRS3.PNG){width="70%"}
:::
:::

## Point Geometries

The feature Bob's Dogs is:

```{r}
st_coordinates(guelph$geometry[[1]])
```

This tells us two pieces of information.

1)  The fact that it is a point

2)  **Using the CRS** associated with this `sfc`, it tells us where it is using a coordinate pair.

## Polygons

::: columns
::: {.column width="50%"}
```{r}
st_coordinates(guelph$geometry[[3]])
```

::: incremental
-   Polygon=points connected clockwise

-   First point = last point

-   Brackets/commas are used in `sfc` to distinguish between linestrings and polygons. Specifics not important
:::
:::

::: {.column width="50%"}
```{r, echo = FALSE, fig.height = 8}
coords = st_coordinates(guelph$geometry[3]) |> round(5)

par(mar = c(1,1,1,1))
plot(guelph$geometry[3])
text(coords[, "X"], coords[, "Y"], 
     labels = paste("(",coords[, "X"],",", coords[, "Y"],")"),
     cex = 1.5)
```
:::
:::

## Basic plots

::: columns
::: {.column width="50%"}
```{r, echo = FALSE}
guelph
```

::: incremental
-   `plot()` to plot `sf` objects (basic).

-   To plot only geometries, use `select()`.

-   The `sfc` column will always remain unless you specifically get rid of it with e.g `select(-geometry)`.
:::
:::

::: {.column width="50%"}
```{r, fig.height = 8}
guelph |> 
  select() |> 
  plot(lwd = 3)
```
:::
:::

## 

::: columns
::: {.column width="30%"}
What type of geometry will countries be?
:::

::: {.column width="70%"}
```{r, echo = FALSE, fig.height = 7}
world |> 
  filter(name_long %in% c("Canada","United States")) |> 
  select(name_long) |> 
  plot()
```
:::
:::

## 

```{r}
world_sf = world |> 
  select(name_long, continent, pop, area_km2)
head(world_sf)
```

-   most `dplyr` verbs will work as you would expect.

-   However, we need to be careful when we `group_by + summarize`

## Aggregating an sfc column.

Suppose we want to calculate the population density by continent.

``` r
dens_by_continent = world_sf |> 
  group_by(continent) |> 
  summarise(pop = sum(pop, na.rm = TRUE),
            area_km2 = sum(area_km2), na.rm = TRUE) |> 
  mutate(pop_dens = pop/area_km2) |> 
  select(continent,pop_dens)
head(dens_by_continent)
```

## 

```{r, echo = FALSE}
dens_by_continent = world_sf |> 
  group_by(continent) |> 
  summarise(pop = sum(pop, na.rm = TRUE),
            area_km2 = sum(area_km2), na.rm = TRUE) |> 
  mutate(pop_dens = pop/area_km2) |> 
  select(continent,pop_dens)
head(dens_by_continent)
```

What happened?

## Geometry unions

::: columns
::: {.column width="50%"}
::: incremental
-   Whenever you aggregate over rows of an `sfc` object, the `sf` package will **aggregate** the geometries.

-   This is called a **geometry union**.

-   Union(polygon,polygon) = multipolygon

-   Union(point, polygon) = geometry collection

-   etc.
:::
:::

::: {.column width="50%"}
![Union of two sets (From Wikipedia)](10_union.PNG){height="75%"}
:::
:::

## Geospatial - working with the sfc

Subsetting dataframes is straight forward. eg `us_states[1,3]` return the 1st row and 3rd column of a data frame

Similarly, we can use `dplyr` verbs filter/select to get the rows/columns we want.

But what if I wanted to select all grocery stores in Guelph?

I would need points representing stores, and a polygon representing guelph, then I would need to subset the stores based on the ones within Guelph's polygon



##

::: columns
::: {.column width="50%"}
Consider the example of a giant red box over the U.S:

* Which states are completely covered by the red box?
* Which states are touching the red box?
* Which states are not touching the red box?


```{r, echo =FALSE}
data("us_states")
```

```{r}
head(us_states |> select(NAME))
```

:::

::: {.column width="50%"}

```{r, echo = FALSE}
polygon_list = list(rbind(c(-100, 35), 
                          c(-100, 45), 
                          c(-90, 45), 
                          c(-90, 35), 
                          c(-100,35)))

area = st_polygon(polygon_list) |> st_sfc()

area_nad83 = st_set_crs(area, st_crs(us_states))
```

```{r}
st_coordinates(area_nad83)
```

```{r,echo=FALSE, fig.cap = "Giant red box over the U.S...Impending doom?", fig.height = 8}
us_states |> select() |> plot()
plot(area_nad83, add=TRUE, col = "red")
```

:::
:::

## 

The following command will give us all rows who's geometries **intersect** with the red box:

```{r}
redbox_intersects = us_states[area_nad83,]

redbox_intersects |> select(NAME) |> head()
```

Why intersects? When we subset `sf` objects with other `sf` objects, we rely on a **topological relationship**, where the default is intersects.

##

If we wanted to change the relationship, we use the third position in subsetting brackets.

For example, if we want the states that are entirely covered by the box, then we would use:

```{r}
redbox_within = us_states[area_nad83,,op=st_within]

redbox_within |> select(NAME) |> head()
```




