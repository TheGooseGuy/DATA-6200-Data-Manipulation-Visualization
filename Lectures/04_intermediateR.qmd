---
title: "Intermediate R programming Concepts"
author: "DATA*6200"
date: "Sept 18, 2024"
format: 
  revealjs:
    echo: true
    code-line-numbers: false
    slide-number: true
---

## Learning objectives and reading

::: columns
::: {.column width="50%"}
-   Finishing up wide-to-long, long-to-wide
-   Data importing: Basics
-   Data as strings
-   Regular expressions for data wrangling
:::

::: {.column width="50%"}
Reading:

Data Science with R: Chapters 7, 14,15
:::
:::

```{r, include = FALSE}
library(tidyverse)
library(nycflights13)
```

## Lengthening data

Transforming your data from **wide** to **long** format can be done using `pivot_longer`

. . .

```{r}
billboard |> 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank"
  ) 
```

## More complex example

Often wide data will have variable names AND data...

. . .

```{r}
head(household)
```

. . .

Variable names are?

. . .

Data values are?

## More complex example (contd)

Need to use `.value` to tell pivot longer to make different variable names for both "name" and "dob":

. . .

```{r}
household |> 
  pivot_longer(
    cols = !family, # all columns except family
    names_to = c(".value", "child"), 
    names_sep = "_", 
    values_drop_na = TRUE
  )
```

## Widening data using pivot_wider

::: columns
::: {.column width="50%"}
Suppose we have some tidy, long data:

```{r}
df <- tribble(
  ~id, ~measurement, ~value,
  "A",        "bp1",    100,
  "B",        "bp1",    140,
  "B",        "bp2",    115, 
  "A",        "bp2",    120,
  "A",        "bp3",    105
)
```
:::

::: {.column width="50%"}
We can make it wider using:

```{r}

df |> 
  pivot_wider(
    names_from = measurement,
    values_from = value
  )
```
:::
:::

Notice that the wide data is smaller in size!

# Data import/export

## Reading data from a file

The simplest way to load data into your R session is to load it in from a file on your computer.

. . .

To make this easy, it is good to look for your *working directory* to determine where R will default pull from.

. . .

```{r}
getwd()
```

. . .

This will usually be the folder that your R project is stored in.

. . .

Step two is to look at the file extension, and determine how the data is formatted.

. . .

Suppose we want to load in the .csv file found here: "https://pos.it/r4ds-students-csv"

## comma-separated value (.csv) files

**Comma-separated value** aka csv files are files where columns are separated by commas, and rows are separated by breaks/enters.

. . .

E.g: the file located here: https://pos.it/r4ds-students-csv

. . .

We can load these data directly from the website using:

. . .

```{r}
read_csv("https://pos.it/r4ds-students-csv")
```

## comma-separated value (.csv) files

Alternatively, we could save this .csv into a subfolder of our R project on your computer:

. . .

```{r}
students <- read_csv("data/students.csv")
```

. . .

This assumes that the file "student.csv" is in a project subfolder called "data".

. . .

We could have also used `r paste0(getwd(),"data/students.csv")`.

## Fixing column names

```{r}
names(students)
```

. . .

Names Student ID and Full name are surrounded by \`. Why?

. . .

To fix this, we can use dplyr's `rename`:

. . .

```{r}
students |> 
  rename(
    student_id = `Student ID`,
    full_name = `Full Name`
  )
```

## Janitor package

The `janitor` package has a function called `clean_names()` that will automatically standardize variable names for you:

. . .

```{r}
students |> janitor::clean_names()
```

. . .

Now all names are syntactic and in the same format!

## Forcing column types

Notice that when we loaded in the .csv file, the age variable was a character. This is because when we use `read_csv`, it tries to guess the type of the variable.

. . .

If this variable had only contained numbers, then it would have guessed "numeric".

. . .

You can try forcing variables to be certain types using:

. . .

```{r}
read_csv("data/students.csv", col_types = c("c","c","c","c","d"))
```

# Other file types

Basic data import functions:

-   read_csv2
-   read_tsv
-   read_excel
-   many, many more

. . .

Will look at other more advanced I/O topics such as scraping HTML and utilizing databases.

. . .

Can also create files using e.g:

. . .

```{r}
write.csv2(students, "data/students_clean.csv")
```

# Strings and regular expressions

Code and examples from Chapter 14-15 Data Science with R.

```{r}
library(babynames)
```

## Strings

Strings are very common in programming. We have seen the `chr` data type thus far, which are strings. We can make strings using:

. . .

```{r}
string_simple <- "This is a string"
```

. . .

Can also use single quotes, which is useful when you have a quote inside a quote.

. . .

```{r}
string_w_quote <- 'If I want to include a "quote" inside a string, I use single quotes'
```

## Escape characters

When dealing with strings, there are certain characters that are not **literal**. As a silly example, how would you define a string with just " :

. . .

``` r
does_not_work <- " " "
```

We can **escape** this using "\\"

. . .

```{r}
works <- "\""
works
```

. . .

Notice this is just how R represents the string. We can see the string content using:

. . .

```{r}
cat(works)
```

## Special characters

We can also add line-breaks (\n), tabs(\t), greek letters, etc by using a combination of Â  and something else.

. . .

```{r}
x <- c("one\ntwo", "one\ttwo", "\u00b5", "\U0001f604")

cat(x)
```

## stringr Package

The `stringr` package in R provides many functions for working with strings. These functions start with `str_`.

. . .

This package is loaded when you load the `tidyverse`.

. . .

Earlier in this quarto file, I used a function `paste0`, which sticks two strings together. We can also do this using:

. . .

```{r}
str_c("x","y")

str_c("Hello ", c("John", "Susan"))
```

. . .

`str_length` outputs the length of a string

. . .

```{r}
str_length(c("Justin Slater","1j31k3", NA))
```

## Babynames

```{r}
babynames |> head(4)
```

. . .

How long are babynames?

. . .

```{r}
babynames |> 
  count(length = str_length(name), wt = n) |> # new verb!!
  arrange(desc(n)) |> 
  head()
```

## String subsetting (very useful)

. . .

`str_sub` allows for a sequence of characters to be subset. E.g

. . .

```{r}
babynames |> 
  mutate(first3 = str_sub(name, 1,3)) |> # first 3 letters
  mutate(last3 = str_sub(name,-3,-1)) # last 3 letters
```

## Making numbers

Despite your best effort when loading data, it still may not be the type you are looking for.

. . .

A common example is when R thinks a number is a character. We can remedy this using `parse_double(x)`:

. . .

```{r}
x <- c("1.2", "5.6", "1e3")
parse_double(x)
```

A slightly more "magical" function is `parse_number`, which drops any non-number before the first number and all characters after the first number

. . .

```{r}
x <- c("$1,234", "USD 3,513", "59%", "1k2b3++17")
parse_number(x)
```

## Regular expressions

Regular expressions, or regexp, is a language for describing patterns and relationships within/between strings.

. . .

*Extremely* useful for parsing non numeric data.

. . .

There are two types of characters, **literal** and **meta** characters.

. . .

Examples of **literal** characters are abc123.

. . .

Examples of **meta** characters are .,+,\*,\[\], they have special meanings.

. . .

The `str_view`, similar to `cat` is going to be used to see what is going on.

## Commonalities betweens strings

Basic string relationship:

. . .

```{r}
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), "a")
```

. . .

Now we can add the meta character `.`, which means "any other letter"

. . .

```{r}
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), "a.")
```

## Commonalities between strings

What would this output?

. . .

``` r
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), ".a.")
```

. . .

Instead of allowing any letter, maybe just allow some letters using `[]`

. . .

```{r}
str_view(words, "[aeiou]x[aeiou]")
```

. . .

Or maybe disallow letters in the brackets:

. . .

```{r}
str_view(words, "[^aeiou]y[^aeiou]")
```

## Quantifiers

`?` allows the pattern to be optional:

. . .

```{r}
str_view(c("a", "ab", "abb"), "ab?")
```

. . .

While `+` allows a patter to repeat

. . .

```{r}
str_view(c("a", "ab", "abb"), "ab+")
```

. . .

and `*` is the most flexible, letting the pattern be optional and allow for repeats if present:

. . .

```{r}
str_view(c("a", "ab", "abb"), "ab*")
```

## Alternation

Alternation allows us to pick between patterns. We use alternation using `|`:

. . .

```{r}
str_view(fruit, "apple|melon|nut")
```

## Matching strings

`str_detect` is a vectorized function that will return TRUE or FALSE if the pattern is present in each element of the vector:

. . .

```{r}
str_detect(c("justin","slater"), "...i")
```

. . .

All babynames with "Justin" in the name?

. . .

```{r}
babynames |> 
  filter(str_detect(name, "Justin")) |> 
  count(name, wt = n, sort = TRUE)
```

## Replacing/removing strings

Often in the data cleaning process, one may want to replace or remove a piece of a string with something else:

. . .

```{r}
str_replace(c("Justin","Slater"), "[aeiouy]", "X" )
```

. . .

```{r}
str_replace_all(c("Justin","Slater"), "[aeiouy]", "X")
```

. . .

```{r}
str_remove(c("Justin","Slater"), "[aeiouy]")
```

. . .

```{r}
str_remove_all(c("Justin","Slater"), "[aeiouy]")
```

## Exercise

Using the `babynames` data.frame(), create a new column called `vowels` that replaces all consonant (non-vowels) in the `names` column with a "-". You will need:

- One `dplyr` verb: `filter`, `select`, `mutate`, `summarise`
- One of:
    - `str_replace`
    - `str_replace_all`
    - `str_remove`
    - `str_remove_all`


## Extracting variables

```{r}
table3 |> head(3)
```

. . .

```{r}
table3 |> 
  separate_wider_delim(
    cols = rate, 
    names = c("count","population"), 
    delim = "/" 
  )
```

## Escaping

```{r, include = FALSE}
df <- data.frame(
  column1 = c("A", "B", "C", "D"),
  column2 = c("[1]", "[2]", "[3]", "[4]")
)
```

. . .

```{r}
df
```

. . .

```{r}
df |> mutate(
  column2 = str_replace(column2, "[1]", "one")
)
```

. . .

But how do we get rid of the brackets at keep the number?

## Escaping

Just escape it? Whats the problem here? **Hard concept**

. . .

``` r
df |> mutate(
  column2 = str_replace_all(column2, "[\[\]]", "")
)
```

. . .

The string you are inputting for the regexp above is not the regexp itself, it is a string that represents it.

. . .

to create a regexp with an escape in it, you need to use a "\\" to ensure that the first "\\" gets passed into the regexp:

. . .

```{r}
df |> mutate(
  column2 = str_replace_all(column2, "[\\[\\]]", "")
)
```
