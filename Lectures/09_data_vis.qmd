---
title: "Data Vis and exploration"
author: "DATA*6200"
date: "Oct 7, 2024"
format: 
  revealjs:
    echo: true
    code-line-numbers: false
    slide-number: true
    width: 1500
    height: 700
---

## Learning objectives and reading

::: columns
::: {.column width="50%"}
- Annotating graphs
- Changing scales
- Graphing themes
- Understanding variation

:::

::: {.column width="50%"}
Reading:

Chapters 10/11 Data Science with R

:::
:::

# Communication Contd

Chapter 11 Data Science with R (contd)

```{r, results = "hide"}
library(tidyverse)
library(scales)
library(ggrepel)
library(patchwork)
load("US_census.rda")
```

## Annotations

::: columns
::: {.column width="50%"}
Labels on axes etc. are absolutely necessary.

An optional, but potentially very helpful tool is labeling observations or aspects of the graph directly.

For instance, instead of having a legend on this graph, we could instead opt to label the curves directly.
:::

::: {.column width="50%"}
```{r, echo = FALSE, fig.height = 8}
drive_plot <- ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
  geom_point(size = 3) +
  geom_smooth(se = FALSE, size =2)+
  theme(text=element_text(size = 20))
drive_plot
```
:::
:::

## Annotating

Where should we put the label? 1 option would be to put it at the end of each curve.

Let's first extract the position of the end of the curve. Take the largest `displ` value for each drive type.

```{r}
label_info <- mpg |>
  group_by(drv) |>
  arrange(desc(displ)) |>
  slice_head(n = 1) 

label_info
```

## Annotating (contd)

Next, make a dataset with the x (`displ`), y (`hwy`) coordinates, the drv variable to match the original data, and the label we want (call it `drive_type`)

```{r}
label_info <- label_info |>   
  mutate(
    drive_type = case_when(
      drv == "f" ~ "front-wheel",
      drv == "r" ~ "rear-wheel",
      drv == "4" ~ "4-wheel"
    )
  ) |>
  select(displ, hwy, drv, drive_type)

label_info
```

## 

::: columns
::: {.column width="50%"}
`geom_text()` function maps our information to locations on the graph.

`label` aesthetic is mapped to `drive_type`. Graph's labels will be equal to the value that is present in the `drive_type` variable.

``` {.r code-line-numbers="|2|3|4|5|7"}
drive_plot +
  geom_text(
    data = label_info, 
    aes(x = displ, y = hwy, label = drive_type),
    size = 10, vjust = -0.5, hjust = "right"
  ) +
  theme(legend.position = "none")
```
:::

::: {.column width="50%"}
`hjust` and `vjust` move the label around the associated x/y values so that the line doesn't pass through the label.

```{r, echo = FALSE, fig.height = 7}
drive_plot +
  geom_text(
    data = label_info, 
    aes(x = displ, y = hwy, label = drive_type),
    size = 10, vjust = -0.5, hjust = "right"
  ) +
  theme(legend.position = "none")
```
:::
:::

## ggrepel

::: columns
::: {.column width="50%"}
When making plots with many labels, adjusting the labels using `vjust` and `hjust` would be tough.

We can instead use `geom_text_repel` from the `ggrepel` package.

```{r}
exceptions <- mpg |>
  filter(hwy > 40 | (hwy > 20 & displ > 5))
```

``` r
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(size =2) +
  geom_text_repel(data = exceptions, aes(label = model)) +
  geom_point(data = exceptions, color = "red", size = 2)+
   geom_point(
    data = exceptions,
    color = "red", size = 4, shape = "circle open"
  )
```
:::

::: {.column width="50%"}
```{r, echo = FALSE, fig.height = 8}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(size =3) +
  geom_text_repel(data = exceptions, aes(label = model), size = 7) +
  geom_point(data = exceptions, color = "red", size = 3)+
   geom_point(
    data = exceptions,
    color = "red", size = 5, shape = "circle open"
  )+
  theme(text=element_text(size = 22))
```
:::
:::

## geom_rect

::: columns
::: {.column width="50%"}
There are many functions that you can use to highlight portions of points.

e.g `geom_rect` is a way that you can

``` r
fuel_eff <- ggplot(mpg, aes(x = displ, y = hwy)) +
    geom_point(size =3) +
    geom_text_repel(data = exceptions, aes(label = model), size = 7) +
    geom_point(data = exceptions, color = "red", size = 3)+
    geom_rect(
    aes(ymin = 22, ymax=28, xmin = 5.1, xmax = 7.1), 
    col = "red", alpha = 0, linetype = 2)+
    theme(text=element_text(size = 22))
```
:::

::: {.column width="50%"}
```{r, echo = FALSE, fig.height = 8}
fuel_eff <- ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(size =3) +
  geom_text_repel(data = exceptions, aes(label = model), size = 7) +
  geom_point(data = exceptions, color = "red", size = 3)+
  geom_rect(aes(ymin = 22, ymax=28, xmin = 5.1, xmax = 7.1), col = "red", alpha = 0, linetype = 2)+
  theme(text=element_text(size = 22))

fuel_eff
```
:::
:::

## annotate()

::: columns
::: {.column width="50%"}
`geom_`'s are generally better when you want to label a bunch of points

`annotate()` is good for adding a single label with a narrative, or similar.

``` r
fuel_eff+
  annotate(geom = "label",
    label = "Medium fuel efficiency, large engines", 
    x=6, y=30, size = 6)
```
:::

::: {.column width="50%"}
```{r, echo = FALSE, fig.height=8}
fuel_eff+
  annotate(geom = "label",
    label = "Medium fuel efficiency, large engines", 
    x=6, y=30, size = 6)
```
:::
:::

## 

::: columns
::: {.column width="50%"}
Another example:

``` {.r code-line-numbers="|3,4,5,6,7|8,9,10,11,12"}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(size = 3) +
  annotate(
    geom = "label", x = 3.5, y = 35,
    label = "Larger engine sizes tend\nto have lower fuel economy.",
    hjust = "left", color = "red", size = 6
  ) +
  annotate(
    geom = "segment",
    x = 3, y = 35, xend = 5, yend = 25, color = "red",
    arrow = arrow(type = "closed")
  )+
  theme(text=element_text(size = 22))
```
:::

::: {.column width="50%"}
```{r, echo = FALSE, fig.height = 8}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(size = 3) +
  annotate(
    geom = "label", x = 3.5, y = 35,
    label = "Larger engine sizes tend\nto have lower fuel economy.",
    hjust = "left", color = "red", size = 6
  ) +
  annotate(
    geom = "segment",
    x = 3, y = 35, xend = 5, yend = 25, color = "red",
    arrow = arrow(type = "closed")
  )+
  theme(text=element_text(size = 22))
```
:::
:::

## Themes and scales

::: columns
::: {.column width="50%"}
How does Dallas county compare in population to a typical Texan county?

``` r
texas_counties <- US_census |> 
  filter(state == 'Texas') |> 
  select(name, pop2010)


texas_counties |> 
  ggplot(aes(x=name, y = pop2010))+
  geom_point()
```

Lots of work needs to be done to make this plot more legible.

Like what?
:::

::: {.column width="50%"}
```{r, fig.height = 8, echo = FALSE}
texas_counties <- US_census |> 
  filter(state == 'Texas') |> 
  select(name, pop2010)

texas_counties |> 
  ggplot(aes(x=name, y = pop2010))+
  geom_point()

```
:::
:::

## 

::: columns
::: {.column width="50%"}
When we did the ggplot code on the previous slide, by default, this is what is being executed:

``` r
texas_counties |> 
  ggplot(aes(x=name, y = pop2010))+
  geom_point()+
  scale_y_continuous()+
  scale_x_discrete()
```

Here, makes more sense to not label the x-axis.

``` r
scale_x_discrete(labels = NULL)
```
:::

::: {.column width="50%"}
```{r, echo = FALSE, fig.height = 8}
texas_counties |> 
  ggplot(aes(x=name, y = pop2010))+
  geom_point()+
  scale_y_continuous()+
  scale_x_discrete(labels = NULL)
```
:::
:::

## 

::: columns
::: {.column width="50%"}
But we still get those annoying Tickmarks.

We can just remove the entire axis by altering the **theme**:

``` r
texas_counties |> 
  ggplot(aes(x=name, y = pop2010))+
  geom_point()+
  scale_x_discrete(labels = NULL)+
  labs(x = NULL)+
  theme(axis.title.x = element_blank(),
        axis.ticks.x = element_blank())
```
:::

::: {.column width="50%"}
```{r, echo = FALSE, fig.height = 8}
basic_plot = texas_counties |> 
  ggplot(aes(x=name, y = pop2010))+
  geom_point()+
  scale_x_discrete(labels = NULL)+
  labs(x = NULL)+
  theme(axis.title.x = element_blank(),
        axis.ticks.x = element_blank())
basic_plot
```
:::
:::

## 

::: columns
::: {.column width="50%"}
To compare Dallas to a "typical" county, maybe we can just use a `geom_hline` where the average is.

``` r
basic_plot + 
  geom_hline( 
    yintercept = mean(texas_counties$pop2010),
    col = "red", linetype = 2, size = 1.5)
```

Problem?
:::

::: {.column width="50%"}
```{r, echo = FALSE, fig.height = 8}
basic_plot + 
  geom_hline( 
    yintercept = mean(texas_counties$pop2010),
    col = "red", linetype = 2, size = 1.5)
```
:::
:::

## 

::: columns
::: {.column width="50%"}
Instead, let's make a new graph comparing the population mean to the **median** population size.

Let's also tidy up the plot a bit.

``` r
texas_counties <- texas_counties |>
  mutate(median_ratio = pop2010/median(pop2010))


texas_counties |> 
  ggplot(aes(x=name, y = median_ratio))+
  geom_point()+
  scale_x_discrete(labels = NULL)+
  scale_y_log10()+
  labs(x = NULL)+
  theme_bw()+
  theme(x.axis = element_blank(),
        axis.title.x = element_blank(),
        axis.ticks.x = element_blank(),
        panel.border = element_blank(),
        panel.grid.major.x = element_blank(),  
        panel.grid.minor.x = element_blank() )
```

Still have some work to do
:::

::: {.column width="50%"}
```{r, echo = FALSE, fig.height = 8}

texas_counties <- texas_counties |>
  mutate(median_ratio = pop2010/median(pop2010))



texas_counties |> 
  ggplot(aes(x=name, y = median_ratio))+
  geom_point()+
  scale_x_discrete(labels = NULL)+
  scale_y_log10()+
  labs(x = NULL)+
  theme_bw()+
  theme(axis.title.x = element_blank(),
        axis.ticks.x = element_blank(),
        panel.border = element_blank(),
        panel.grid.major.x = element_blank(),  
        panel.grid.minor.x = element_blank() )
```
:::
:::

## 

::: columns
::: {.column width="50%"}
``` {.r code-line-numbers="|1-6|9-12|15-19|19-24|30-34"}
dallas <- texas_counties |> 
    mutate(
    name = str_remove(name, " County"),
    name = fct_reorder(name, desc(median_ratio))
    ) |> 
  filter(name == "Dallas")

texas_counties |> 
  mutate(
    name = str_remove(name, " County"),
    name = fct_reorder(name, desc(median_ratio))
    ) |> 
  ggplot(aes(x=name, y = median_ratio)) +
  geom_point(size = 3)+
  geom_point(data= dallas,  col = "blue", size = 3)+
  geom_point(
    data = dallas,
    color = "blue", size = 5, shape = "circle open"
  )+
  annotate(
    geom = "segment",
    x = "Harrison", y = 100, xend = "Bexar", yend = dallas$median_ratio, color = "grey30",
    arrow = arrow(type = "open"), size = 1.5
  )+
  annotate(
    geom = "text", x = "Harrison", y = 100,
    label = "Dallas' population is >100x\nthat of a typical Texan county",
    hjust = "left", color = "grey30", size =6
  )+
  scale_x_discrete(labels = NULL)+
  scale_y_log10(breaks = c(.01, .1, 1, 10, 100),
                labels = c(.01,.1,1,10,100)) +
  labs(x = "Texas counties ordered by population size", y = "Population/median")+
  theme_bw()+
  theme(axis.ticks.x = element_blank(),
        axis.ticks.y = element_blank(),
        panel.border = element_blank(),
        panel.grid.major.x = element_blank(),  
        panel.grid.minor.x = element_blank(),
        text=element_text(size = 20))
```
:::

::: {.column width="50%"}
```{r, echo = FALSE, fig.height = 8}

dallas <- texas_counties |> 
    mutate(
    name = str_remove(name, " County"),
    name = fct_reorder(name, desc(median_ratio))
    ) |> 
  filter(name == "Dallas")

texas_counties |> 
  mutate(
    name = str_remove(name, " County"),
    name = fct_reorder(name, desc(median_ratio))
    ) |> 
  ggplot(aes(x=name, y = median_ratio)) +
  geom_point(size = 3)+
  geom_point(data= dallas,  col = "blue", size = 3)+
  geom_point(
    data = dallas,
    color = "blue", size = 5, shape = "circle open"
  )+
  annotate(
    geom = "label", x = "Harrison", y = 100,
    label = "Dallas' population is >100x\nthat of a typical Texan county",
    hjust = "left", color = "grey30", size =6
  )+
  annotate(
    geom = "segment",
    x = "Harrison", y = 100, xend = "Bexar", yend = dallas$median_ratio, color = "grey30",
    arrow = arrow(type = "open"), size = 1.5
  )+
  scale_x_discrete(labels = NULL)+
  scale_y_log10(breaks = c(.01, .1, 1, 10, 100),
                labels = c(.01,.1,1,10,100)) +
  labs(x = "Texas counties ordered by population size", y = "Population/median")+
  theme_bw()+
  theme(axis.ticks.x = element_blank(),
        axis.ticks.y = element_blank(),
        panel.border = element_blank(),
        panel.grid.major.x = element_blank(),  
        panel.grid.minor.x = element_blank(),
        text=element_text(size = 20))

```
:::
:::

## Exercise

The plot on the previous slide gives no concept of the "typical" population of a Texan county.

Add an element or two to the plot to convey this information to the reader. If you can't code it in this amount of time, just explain what you would do.


## Default labels and themes

::: columns
::: {.column width="50%"}
There are basic x/y axis label presets that allow for plotting things with units.

E.g percents, dollars.

``` r
ggplot(diamonds, aes(x = cut, fill = clarity)) +
  geom_bar(position = "fill") +
  scale_y_continuous(name = "Percentage", labels = label_percent())+
  theme_dark()+
  theme(text = element_text(size=22))
```
:::

::: {.column width="50%"}
```{r, echo  =FALSE, fig.height = 8}
ggplot(diamonds, aes(x = cut, fill = clarity)) +
  geom_bar(position = "fill") +
  scale_y_continuous(name = "Percentage", 
                     labels = label_percent())+
  theme_dark()+
  theme(text = element_text(size=22))
```
:::
:::

## A note on colour

::: columns
::: {.column width="30%"}
Do not rely on colour to do your work for you.

``` r
US_census |> 
  ggplot(
    aes(x = median_household_income, 
        home_ownership, 
        col = state))+
  geom_point()
```
:::

::: {.column width="70%"}
```{r, echo = FALSE, fig.height = 6}
US_census |> 
  ggplot(
    aes(x = median_household_income, 
        home_ownership, 
        col = state))+
  geom_point()
```
:::
:::

## Arranging visualizations

Can arrange plots side-by-side using `p1 + p2`.

```{r, fig.width = 12, echo = FALSE}
p1 <- ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point() + 
  labs(title = "p1")
p2 <- ggplot(mpg, aes(x = drv, y = hwy)) + 
  geom_boxplot() + 
  labs(title = "p2") +
  coord_flip()
p1 + p2
```

## 

Can make more intricate arrangements using `|` and `/`: `(p1|p3)/p2`

```{r, fig.width = 12, echo = FALSE}
p3 <- ggplot(mpg, aes(x = cty, y = hwy)) + 
  geom_point() + 
  labs(title = "Plot 3") 

(p1 | p3) / p2

```

# Data exploration

Chapter 10 of Data Science with R

## Variation

-   If we measure a variable repeatedly, we will often get different values.

-   If we measured the height's of female students at University of Guelph, we would expect less variation than if we measured all students.

-   Variation is sometimes explained by other variables, and sometimes it can be viewed as totally random.

-   We can examine this both graphically and quantitatively

## Standard deviation

::: columns
::: {.column width="50%"}
(Sample) standard deviation can be computed as: $$ \sqrt{\frac{\sum_{i=1}^n (X_i - \mu_x)^2}{n}}$$ You can interpret it *like* the "average deviation from the mean".

If this is larger, we expect the typical data point to be further from the average.

However, we have seen the issue with averages.
:::

::: {.column width="50%"}
```{r, fig.height=8, echo = FALSE}
ggplot(diamonds, aes(x = carat)) +
  geom_histogram()+
  geom_vline(xintercept = mean(diamonds$carat), 
             col = "red", 
             linetype = 2, size =2)+
  geom_vline(xintercept = mean(diamonds$carat) - 1.5*sd(diamonds$carat), 
             col = "blue", 
             linetype = 2, size =2)+
  geom_vline(xintercept = mean(diamonds$carat) + 1.5*sd(diamonds$carat), 
             col = "blue", 
             linetype = 2, size =2)+
  theme(text = element_text(size = 22))+
  labs(title = "1.5 standard deviations (blue) on either side of the mean(red)")
```
:::
:::

## Solution 1 transform

::: columns
::: {.column width="50%"}
Transform the data, e.g log transform it.

This can mess up our interpretation, as we often want to model/interpret the variation on the natural scale.
:::

::: {.column width="50%"}
```{r, echo = FALSE, fig.height=8}
diamonds = diamonds |> 
  mutate(log_carat = log(carat))

ggplot(diamonds, aes(x = log_carat)) +
  geom_histogram()+
  geom_vline(xintercept = mean(diamonds$log_carat), 
             col = "red", 
             linetype = 2, size =2)+
  geom_vline(xintercept = mean(diamonds$log_carat) - 1.5*sd(diamonds$log_carat), 
             col = "blue", 
             linetype = 2, size =2)+
  geom_vline(xintercept = mean(diamonds$log_carat) + 1.5*sd(diamonds$log_carat), 
             col = "blue", 
             linetype = 2, size =2)+
  theme(text = element_text(size = 22))+
  labs(title = "1.5 standard deviations (blue) on either side of the mean(red)")
```
:::
:::

## Solution 2: Robust statistics

::: columns
::: {.column width="50%"}
Robustness in statistics means "not sensitive to outliers".

What is a robust measure of variation that is not sensitive to skewness or large values?

The blue lines on this graph reflect the middle 80% of diamond cuts.
:::

::: {.column width="50%"}
```{r, echo = FALSE, fig.height=8}
ggplot(diamonds, aes(x = carat)) +
  geom_histogram()+
  geom_vline(xintercept = median(diamonds$carat), 
             col = "red", 
             linetype = 2, size =2)+
  geom_vline(xintercept = quantile(diamonds$carat, prob = 0.10), 
             col = "blue", 
             linetype = 2, size =2)+
  geom_vline(xintercept = quantile(diamonds$carat, prob = 0.90), 
             col = "blue", 
             linetype = 2, size =2)+
  theme(text = element_text(size = 22))
```
:::
:::

## Relative variation

::: incremental
-   If suppose there are 3 public school librarians that make 25k, 50k, and 75k.

-   Suppose there are 3 software engineers that make 100k, 150k and 200k.

-   Which job has more "variation"?
:::

## Covariation

::: columns
::: {.column width="50%"}
Suppose we want to look at how price **varies** with cut quality.

We may want to compute some robust statistics for each quality category, as shown on the right.

It appears that as the cut quality goes up, the price goes down...
:::

::: {.column width="50%"}
```{r, echo = FALSE, fig.height = 8}
ggplot(diamonds, aes(x = cut, y = price)) +
  geom_boxplot()
```
:::
:::

## Covariation

::: columns
::: {.column width="50%"}
It is possible that the quality of the diamond is inversely correlated with `carat` aka the size.

And you can imagine, the size of the diamond is likely the most predictive of the price, aside from maybe clarity.

In short, when doing data exploration, it is important to see how variables vary by themselves, but also the impact of other variables.
:::

::: {.column width="50%"}
```{r, echo = FALSE, fig.height = 8}
ggplot(diamonds, aes(x = carat, y = price)) +
  geom_point()+
  theme(text= element_text(size=22))
```
:::
:::
