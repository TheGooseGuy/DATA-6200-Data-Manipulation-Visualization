---
title: "Intermediate R programming Concepts part 2"
author: "DATA*6200"
date: "Sept 23, 2024"
format: 
  revealjs:
    echo: true
    code-line-numbers: false
    slide-number: true
---

## Learning objectives and reading

::: columns
::: {.column width="50%"}
-   More advanced regular expressions

-   Variables with levels - Factor

-   Merging tables using joins
:::


::: {.column width="50%"}
Reading: R for Data Science, Chapters 15,16,19

```{r, results=  'hide'}
library(tidyverse)
library(nycflights13)
library(babynames)
```
:::

:::

```{r, include = FALSE}
library(tidyverse)
library(nycflights13)
library(babynames)
```

## Exercise

Using the `babynames` data.frame(), create a new column called `vowels` that replaces all consonant (non-vowels) in the `names` column with a "-". You will need:

```{r}
babynames |> 
  mutate(
    vowels = str_replace_all(name, "[^AEIOUaeiou]", "-")
    )
```


## Extracting variables

```{r}
table3 |> head(3)
```

. . .

```{r}
table3 |> 
  separate_wider_delim(
    cols = rate, 
    names = c("count","population"), 
    delim = "/" 
  )
```

## Escaping

```{r, include = FALSE}
df <- data.frame(
  column1 = c("A", "B", "C", "D"),
  column2 = c("[1]", "[2]", "[3]", "[4]")
)
```

. . .

```{r}
df
```

. . .

```{r}
df |> mutate(
  column2 = str_replace(column2, "[1]", "one")
)
```

. . .

But how do we get rid of the brackets at keep the number?

## Escaping

Just escape it? Whats the problem here? **Hard concept**

. . .

``` r
df |> mutate(
  column2 = str_replace_all(column2, "[\[\]]", "")
)
```

. . .

The string you are inputting for the regexp above is not the regexp itself, it is a string that represents it.

. . .

to create a regexp with an escape in it, you need to use a "\\" to ensure that the first "\\" gets passed into the regexp:

. . .

```{r}
df |> mutate(
  column2 = str_replace_all(column2, "[\\[\\]]", "")
)
```

## Counter-intuitive example

Suppose you had the string `string` = "a\\b", and you wanted to remove the "\\" to return a string with "ab".

```{r, include = FALSE}
string = "a\\b"
```

Which of the following statements would return the right thing:

``` r
str_remove(string, "\")
```

. . .

``` r
str_remove(string, "\\")
```

. . .

``` r
str_remove(string, "\\\")
```

. . .

``` r
str_remove(string, "\\\\")
```

## Anchoring

We saw that when used within \[\], \^ negates the set of characters. I.e `[^aeiou]` would return true with any non-vowel.

. . .

However, it can also be used as an **anchor**, forcing the string to occur at the beginning:

. . .


```{r}
str_view(fruit, "ap")
```

. . .


```{r}
str_view(fruit, "^ap")
```

## Anchoring

`$` does the same thing but for the ending:

. . .


```{r}
str_view(fruit, "ape")
```

. . .


```{r}
str_view(fruit, "ape$")
```

. . .


To match a string exactly, use both `^` and `$`.

## Character classes

We saw seen the effects of using brackets and quantifiers:

. . .


```{r}
x <- "a1A b2B c3C abc -!@#%."
str_view(x, "[abcefghijklmnopqrstuvwxyz]+")
```

. . .


However, are shortcuts to convey the same regular expression. e.g the lower case letters:

. . .


```{r}
str_view(x, "[a-z]+") # what happens when we remove the "+"?
```

. . .


Or anything except lower-case letters, numbers, and spaces:

. . .


```{r}
str_view(x, "[^a-z 0-9]+")
```

## Character classes (contd.)

We can be even more succinct. "\\w" is a shortcut any letter/number. "\\W" is any non-letter/number:

. . .


```{r}
str_view(x, "\\w")
```

## Precendence

Just like in math, regex operators have an order of operations. We can influence the order of operations by using `()`

. . .


E.g The usual order of operations here would return a match if the string starts with an a, and match with the individual b's

. . .


```{r}
str_view(x, "^a|b")
```

. . .


We can override this with parenthesis, matching an `a` or `b` only if it is at the start:

. . .


```{r}
str_view(x, "^(a|b)")
```

## Ignoring regexp rules

You can ignore typical regexp rules using `fixed`.

. . .


```{r}
str_view(c("", "a", "."), ".")
```

. . .


```{r}
str_view(c("", "a", "."), fixed("."))
```

. . .


Can also ignore cases:

. . .


```{r}
str_view(c("Justin", "Slater"), fixed("justin", ignore_case = TRUE))
```

## Exercise

The vector `sentences` from the `stringr` package is a vector of a bunch of sentences.

Return all sentences that start with the word "The".

## Regular expressions

::: incremental
-   We only scratched the surface here regarding regular expressions.

-   There are a myriad of other power tools and commands that we can use.

-   Couple of tips:

    -   If you have a long regexp, ask yourself (or Google) if there is a way you can make it shorter / more succinct.
    -   If you think you can't quite get the precise regexp you want, you are probably wrong and just need to think (google) a bit harder.
:::

# Factors

```{r}
library(forcats)

gss_cat
```

## Factors

Suppose we have some responses to a survey question:

. . .


```{r}
response <- c("Somewhat Disagree", "No opinoin", "Somewhat Agree")
```

. . .


These responses are simply just strings, and they sort alphabetically.

. . .


```{r}
sort(response)
```

. . .


But this order doesn't reflect the order present in the data. Also note the typo.

## Factors

We can define a **factor** by first defining levels:

. . .


```{r}
levels <- c("Disagree", "Somewhat Disagree", "No opinion", "Somewhat Agree", "Agree")
```

. . .


We can then turn the response into a factor using:

. . .


```{r}
factor(response, levels = levels)
```

. . .


If you don't define the levels yourself, `factor` will assume the order is alphabetical.

## Releveling

When plotting, factors will appear in order. That order is not necessarily the mos clear. E.g which religion watches the 4th most T.V?

. . .


```{r, echo = FALSE}
relig_summary <- gss_cat |>
  group_by(relig) |>
  summarize(
    tvhours = mean(tvhours, na.rm = TRUE)
  )
```

. . .


```{r, echo = FALSE}
ggplot(relig_summary, aes(x = tvhours, y = relig)) + 
  geom_point(size = 4)+
  theme_bw()+
    theme(
    plot.title = element_text(size = 20),
    axis.title.x = element_text(size = 16),
    axis.title.y = element_text(size = 16),
    axis.text = element_text(size = 14)
  )+
  labs(x = "T.V hours per day", ylab = "Religion")
```

## Reveling

Can relevel the variables using:

. . .


```{.r}
fct_reorder(relig, tvhours)
```

. . .


```{r, echo = FALSE}
ggplot(relig_summary, aes(x = tvhours, y = fct_reorder(relig, tvhours))) + 
  geom_point(size = 4)+
  theme_bw()+
    theme(
    plot.title = element_text(size = 20),
    axis.title.x = element_text(size = 16),
    axis.title.y = element_text(size = 16),
    axis.text = element_text(size = 14)
  )+
  labs(x = "T.V hours per day", ylab = "Religion")
```

# Joins

```{r}
library(nycflights13)
```

## Keys

Challenging data projects often involve multiple tables. These tables can be **joined** together based on **keys**, which are variable(s) that are in common between data sets.

. . .


For instance, consider the data sets:

::: columns
::: {.column width="45%"}
```{r}
airlines |> head()
```
:::

::: {.column width="55%"}
```{r}
airports |> select(faa, lat, lon) |> head()
```
:::
:::

## Primary and compound keys

A **primary key** is/are variable(s) that uniquely identify each observation. If more than one variable is needed to uniquely identify the row, then it is known as a **compound key**.

. . .


In the airlines data set, either variable could identify each row, the `carrier` variable is succinct and precise.

. . .


```{r}
airlines |> head()
```

## Primary and compound keys (contd.)

In this weather data, what is needed to identify each row. I.e, what is the key?

. . .


```{r}
weather_keyinfo <- weather |> select(origin, time_hour, temp, wind_speed) 
weather_keyinfo
```

## Foreign keys

A foreign key is a set of variables corresponding to the primary key of another dataset. e.g `carrier` is a variable in `flights`, and it is the primary key in

. . .


But it certainly doesn't uniquely identify each observation (which columns do?).

::: columns
::: {.column width="55%"}
`flights`

```{r, echo = FALSE}
flights_keyinfo <- flights |> 
  select(carrier, flight, time_hour, origin, dest) |> 
  head()
flights_keyinfo
```
:::

::: {.column width="45%"}
`airlines`

```{r, echo = FALSE}
airlines |> head()
```
:::
:::

## Joins

If you are familiar with SQL, you have probably used joins before. Joins allow you to combine information from data frames using their keys.

. . .


Dplyr has \~6 functions that allow for joining. The most common is the `left_join()`.

. . .


```{r}
flights_keyinfo |> 
  left_join(airlines, by = c("carrier"))
```

## Joins (cont.)

What if we wanted the weather information from the `weather` data frame?

. . .


```{r}
flights_keyinfo |> 
  left_join(weather_keyinfo, by = c("time_hour", "origin")) 
```

. . .


By default, by = all columns in common. I would rarely leave this argument empty.

## Joining on non-equal column names

A couple of slides ago, we joined on carrier:

. . .


```{.r}
flights_keyinfo |> 
  left_join(airlines, by = c("carrier"))
```

. . .


This is equivalent to:

. . .


```{.r}
flights_keyinfo |> 
  left_join(airlines, join_by(carrier == carrier))
```

. . .


Or you can use the names of the columns:

. . .


``` r
flights_keyinfo |> 
  left_join(airlines, by = c("carrier" = "carrier"))
```

## Joining on non-equal column names

If the names are non-equal, we can use the notation:

. . .


```{r}
flights_keyinfo |> 
  left_join(airports, join_by(dest == faa))
```

. . .


That is, the column is named `dest` in `flights` and `faa` in airports.

## Multiple matches

If we `left_join(x,y)`, then the result will have at least as many rows as table `x`. If there is more than 1 row in `y` that matches the key in `x`, it will output 1 row for each.

. . .


If there are 0 rows in `y` that have a matching key to a row in `x`, the corresponding row in `x` will have an NA.

. . .


::: columns
::: {.column width="33%"}
df1

```{r, echo = FALSE}
df1 <- tibble(key = c(1, 2, 3, 3), val_x = c("x1", "x2", "x3","x4"))
print(df1, row.names = FALSE)
```
:::

::: {.column width="33%"}
df2

```{r, echo = FALSE}
df2 <- tibble(key = c(1, 2, 2, 4), val_y = c("y1", "y2", "y3","y4"))
print(df2, row.names = FALSE)
```
:::

::: {.column width="33%"}
```{r}
left_join(df1, df2)
```
:::
:::

## Other joins

**Right joins** are the same idea, just reverse the roles of x and y.

. . .


**Inner joins** return only the rows that are in common between them. **Full Joins** return all rows.

. . .


::: columns
::: {.column width="50%"}
Inner joins

```{r}
inner_join(df1,df2)
```
:::

::: {.column width="50%"}
Full join

```{r}
full_join(df1,df2)
```
:::
:::
